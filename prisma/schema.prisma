generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid()) @db.Uuid
  name         String         @unique @db.VarChar(20)
  email        String         @unique @db.VarChar(100)
  auth         Auth?
  class        Class?         @relation(fields: [classId], references: [id])
  classId      String?        @db.Uuid
  inCharge     InCharge?      @relation(fields: [inChargeId], references: [id])
  inChargeId   String?        @db.Uuid
  extraSubject ExtraLecture[] @relation("UserExtraLecture")
  profile      Profile?
  projects     UserProject[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Project {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar(50)
  description String        @db.VarChar(500)
  remark      String        @db.VarChar(400)
  users       UserProject[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model UserProject {
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.Uuid
  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.Uuid
  role      String

  @@id([userId, projectId])
}

model Auth {
  id           String    @id @default(uuid()) @db.Uuid
  credLevel    Int       @default(2) @db.SmallInt
  passwordHash String    @db.VarChar(60)
  secretKey    String?   @db.VarChar(64)
  confirmToken String    @unique @db.VarChar(32)
  verifiedAt   DateTime?
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique @db.Uuid
}

model Profile {
  id            String    @id @default(uuid()) @db.Uuid
  realNameFirst String?   @db.VarChar(15)
  realNameLast  String?   @db.VarChar(15)
  studentNumber String?   @db.VarChar(8)
  birthday      DateTime? @db.Date
  sex           String?   @db.Char(6)
  phone         String?   @db.VarChar(11)
  motherTongue  String?   @db.VarChar(20)
  describe      String?   @db.VarChar(200)
  city          String?   @db.VarChar(20)
  avatarUrl     String    @default("") @db.VarChar(100)
  coverUrl      String    @default("") @db.VarChar(100)
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique @db.Uuid
}

model Class {
  id            String          @id @default(uuid()) @db.Uuid
  grade         Int             @db.SmallInt
  department    String          @db.VarChar(20)
  course        String?         @db.VarChar(20)
  name          String?         @db.VarChar(2)
  studentsCount Int?            @db.SmallInt
  students      User[]
  lecture       CommonLecture[] @relation("ClassCommonLecture")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Subject {
  id            String          @id @default(uuid()) @db.Uuid
  name          String          @db.VarChar(20)
  count         Int?            @db.SmallInt
  credit        Int?            @db.SmallInt
  isRequire     Boolean         @default(false)
  teacher       Teacher[]       @relation("TeacherSubject")
  commonLecture CommonLecture[]
  extraLecture  ExtraLecture[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ExtraLecture {
  id          String     @id @default(uuid()) @db.Uuid
  subject     Subject    @relation(fields: [subjectId], references: [id])
  subjectId   String     @db.Uuid
  room        Room?      @relation(fields: [roomNumber], references: [number])
  roomNumber  String?    @db.VarChar(3)
  students    User[]     @relation("UserExtraLecture")
  timetable   Timetable? @relation(fields: [timetableId], references: [id])
  timetableId String?    @db.Uuid
  teachers    Teacher[]  @relation("TeacherExtraLecture")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Timetable {
  id            String          @id @default(uuid()) @db.Uuid
  dayOfWeek     Int             @db.SmallInt
  period        Int             @db.SmallInt
  startTime     DateTime        @db.Time
  endTime       DateTime        @db.Time
  commonLecture CommonLecture[]
  extraLecture  ExtraLecture[]
}

model Room {
  number       String          @id @db.VarChar(3)
  name         String          @db.VarChar(30)
  seats        Int?
  status       String?         @db.VarChar(10)
  subject      CommonLecture[]
  extraLecture ExtraLecture[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model CommonLecture {
  id          String     @id @default(uuid()) @db.Uuid
  subject     Subject    @relation(fields: [subjectId], references: [id])
  subjectId   String     @db.Uuid
  room        Room?      @relation(fields: [roomNumber], references: [number])
  roomNumber  String?    @unique @db.VarChar(3)
  timetable   Timetable? @relation(fields: [timetableId], references: [id])
  timetableId String?    @db.Uuid
  class       Class[]    @relation("ClassCommonLecture")
  teacher     Teacher[]  @relation("TeacherCommonLecture")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Teacher {
  id            String          @id @default(uuid()) @db.Uuid
  name          String          @unique
  inCharge      InCharge?
  subject       Subject[]       @relation("TeacherSubject")
  commonLecture CommonLecture[] @relation("TeacherCommonLecture")
  extraLecture  ExtraLecture[]  @relation("TeacherExtraLecture")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model InCharge {
  id        String  @id @default(uuid()) @db.Uuid
  students  User[]
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @unique @db.Uuid
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}